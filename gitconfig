[alias]
  co = commit
  ck = checkout
  br = branch -vv
  st = status -uno
  stn = status -unormal
  sl = stash list
  sa = stash apply stash@{0}
  sp = stash pop stash@{0}
  sd = stash drop stash@{0}
  pk = cherry-pick
  am = commit --amend -C HEAD
  gr = log --oneline --graph --color --decorate
  grm = log --oneline --graph --color --decorate --pretty=format:'%h %ar %an %s'
  glog = log --graph --pretty=oneline --abbrev-commit --color --decorate
[user]
  email = chenghua.ch@alibaba-inc.com
  name = chenghua.ch
[http]
  #连续800s传输速率低于200byte才会timeout
  lowSpeedTime = 800      # git config --global http.lowSpeedTime 800
  lowSpeedLimit = 200
  postBuffer = 524288000  # 500MB
[push]
  default = current
[color]
  ui = true

#git log
#git log -p [-1]          #显示最近一次提交修改的内容, -p表示--patch, -1表示只显示最近一次提交
#git log --stat [-1]      #显示提交的统计信息。修改了哪些文件，修改了多少行
#git log --online         #每次提交信息显示在一行
#git log --oneline --graph --decorate --pretty=format:'%h %ar %an %s'  #pretty指定显示格式

#git reflog   #查看历史操作记录，包括已删除/重置的commit
#git reflog --date=iso

#git diff
#git diff --stat         #修改统计
#git diff --numstat      #修改统计 增加&减少

#git show $commit        #查看某次提交的代码
#git show $commit --stat #查看某次提交的修改统计

#git stash show          #查看修改统计，可指定stash, 默认为stash{0}
#git stash show -p       #查看修改代码，可指定stash, 默认为stash{0}
#git stash push -m message specific_files      #stash指定文件

#git branch -u origin/new-remote-branch-name  #更改跟踪分支

#git push origin --delete branch-name         #删除远程分支
#git branch -d branch-name                    #删除本地分支
#git remote prune origin                      #清除远程仓库已不存在但本地远程仓库中仍然存在的分支

#git push出错时调试: GIT_CURL_VERBOSE=1 GIT_TRACE=1 git push

# git cherry-pick A..B              # ignore A
# git cherry-pick A^..B             # include A
# git cherry-pick branch~n branch   # the latest n+1 commits
# git cherry-pick branch~n branch~m # the [n+1, m+1] commits

# 合并
# git rebase origin/xxx   # 当前分支的commit依次rebase, 需多次解决冲突
# git merge origin/xxx    # 当前分支的commit全量合并origin/xxx分支, 一次性解决所有冲突

# tag
# git tag  # 列出所有tag
# git tag -a <tag_name> <commit> # 基于某个commit打tag
# git push origin <tag_name>     # 把tag push到远端
# git tag -d <tagname>           # 删除本地tag
# git push origin :refs/tags/<tagname> # 删除远端tag
# git fetch --tags -f            # 更新本地tags
# git ck -b {tag} tags/{tag}
